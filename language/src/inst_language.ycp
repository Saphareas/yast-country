/**
 * File:
 *	inst_language.ycp
 *
 * Module:
 *	inst_language.ycp
 *
 * Authors:
 *	Klaus   Kämpf <kkaempf@suse.de>
 *	Michael Hager <mike@suse.de>
 *	Stefan  Hundhammer <sh@suse.de>
 *	Thomas Roelz <tom@suse.de>
 *
 * Summary:
 *	Let the user choose the language.
 *
 * $Id$
 *
 */
{
    textdomain "country";

    import "Mode";
    import "Misc";
    import "Installation";
    import "Console";
    import "Encoding";
    import "Language";
    import "Timezone";
    import "Keyboard";
    import "Wizard";
    import "Label";
    import "Popup";




define void LanguageExpertDialog()
    ``{
    symbol ret = `none;
    // help text for keyboard expert screen
    string help_text = _("<p>
Here, fine-tune settings for the language handling.
These settings are written into the file <b>/etc/sysconfig/language</b>.
</p>
");

    // general help trailer
    help_text = help_text + _("<p>
If unsure, use the default values already selected.
</p>");

    help_text = help_text + _("<p>
<b>LANG Environment Settings for User root:</b>
This determines how the locale variables (LC_*) are set for the root user.</p>
<p><b>ctype only:</b> root has the same LC_CTYPE as a normal user. Other values
are unset.<br>
<b>yes:</b> root has the same locale settings as normal user.<br>
<b>no:</b> root has all locale variables unset.
</p>
");

    UI::OpenDialog( `opt(`decorated  ),
		    `HBox(
			`HWeight(40, `RichText( help_text )),
			`HStretch(),
			`HSpacing(1),
			`HWeight(60,
			    `VBox(
				`HSpacing( 45 ),
				// heading text
				`Heading( _("Language Details") ),
				`VSpacing(`opt(`vstretch), 2),
				`Left(`ComboBox(
				    `id(`rootlang),
				    _("Locale Settings for User &root"),
				    // do not translate "ctype"
				    [ `item( `id("ctype"), _("ctype Only")),
				      `item( `id("yes"), _("Yes")),
				      `item( `id("no"), _("No")) ] )),
				`VSpacing(`opt(`vstretch), 1),
				`Left(`CheckBox( `id(`use_utf8),
						 _("Use &UTF-8 Encoding"),
						 true )),
				`VSpacing(`opt(`vstretch), 7),
				`HBox(
				     `PushButton(`id(`ok), `opt(`default),
						 Label::OKButton() ),
				     `PushButton(`id(`cancel),
				                 Label::CancelButton() )
				     )
				))
			 ));
    map val = Language::GetExpertValues();
    map val_on_entry = val;
    y2milestone( "map %1", val );
    UI::ChangeWidget( `id(`rootlang), `Value, val["rootlang"]:"ctype" );
    UI::ChangeWidget( `id(`use_utf8), `Value, val["use_utf8"]:false );
    repeat
	{
	ret = (symbol)UI::UserInput();
	if( ret == `ok )
	    {
	    val = $[];
	    val["rootlang"] = UI::QueryWidget( `id(`rootlang), `Value );
	    val["use_utf8"] = UI::QueryWidget( `id(`use_utf8), `Value );
	    y2milestone( "map ok %1", val );
	    Language::SetExpertValues( val );
	    if (val != val_on_entry)
		Language::ExpertSettingsChanged = true;
	    }
	} until ( ret == `cancel || ret == `ok );
    UI::CloseDialog();
    };

    /* ----------------------------------------------------------------------
     * Language
     * ----------------------------------------------------------------------*/

    // Check if the current call should be treated as the first run (3rd param).
    // In this case if the user exits with next the the current setting
    // will be made the default that is restored with "Reset to defaults".
    //
    boolean set_default = (boolean)WFM::Args( 2 );

    y2milestone("set_default: %1", set_default );

    string language = Language::language;

    UI::SetLanguage(language);

    // Build the contents of the dialog.

    // build up language selection box
    // with the default selection according to Language::language

    // set up selection list with default item

    boolean use_utf8 = true;		// utf8 is default
    boolean use_ascii = false;          // default is utf8 text
    boolean show_expert = true;

    if ( ! lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true ) )
    {
	use_utf8 = false;		// no utf8 support
    }

    if ( lookup (UI::GetDisplayInfo(), "TextMode", false ) )
    {
        use_ascii = true;               // fallback to ascii
    }

    // sort language by ASCII with help of a map
    // $[ "ascii-name" : [ "user-readable-string", "code" ], ...]
    // the "user-readable-string" is either ascii or utf8, depending
    // on textmode probed above (workaround because there isn't any
    // usable console font for all languages).

    map<string,list> languageselsort = 
	mapmap(string lang_code, list lang_info, Language::Selection(), 
	    ``{
				string s = lang_info[1]:"";
				return $[ s :	// ASCII value is the key
				    [lang_info[use_ascii?1:0]:"", lang_code]
			       ];
			   });

    term languagesel =
      `SelectionBox(`id(`language), `opt(`notify), "",
	maplist (any name, list codelist, languageselsort,
		 ``(`item(`id(codelist[1]:""), codelist[0]:"",
			  (language == codelist[1]:"")))));

   /* ----------------------------------------------------------------------
    * Build dialog
    * ----------------------------------------------------------------------*/

    string heading_text = "";

    if( Mode::initial && set_default && !Mode::repair )
	{
	// initial heading for language selection
	// (first 'user visible' screen)
	heading_text = _("Welcome to YaST2 -- The
Installation and System Administration Program
");
	}
    else if ( Mode::repair )
	{
	// heading text
	heading_text = _("Welcome to YaST2 System Repair");
	}
    else
	{
	// heading text
	heading_text = _("Language selection");
	}

    if( Mode::initial && set_default )
	{
	show_expert = false;
	}

    term expert = `HStretch();
    if( show_expert )
	{
	expert = `VBox( `VStretch(),
		        `PushButton( `id(`expert), _("&Details") ),
			`VSpacing(2)
		      );
	}

    term contents = `VBox(
			`VSpacing(0.3),
			`HBox(
			      `HWeight( 25, `HStretch() ),
			      `HWeight( 50,
					`VBox (
						// label text
					       `Left( `Label ( _("Select your language:") ) ),
					       languagesel
					       )
					),
			      `HWeight( 25, expert )
			      ),
			`VSpacing(2)
			);

    // Show a Wizardwindow with  that contents. Don't use the Id `next,
    // `back, and `help

    string help_text = "";

    if (Mode::initial)
	{
	// help text for initial (first time) language screen
	help_text = _("<p>
Choose the <b>language</b> to use during installation and for
the installed system.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Click <b>Accept</b> to proceed to the next dialog.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
<b><i>Nothing will happen</i></b> to your computer until you confirm
all your settings in the last installation dialog.
</p>
");
	if( set_default )
	    {
	    // help text, continued
	    help_text = help_text + _("<p>
You can select <b>Abort Installation</b> at any time to abort the
installation process.
</p>
");
	    }
	}
    else
	{
	// different help text when called after installation
	// in an installed system
	help_text = _("<p>
Choose the new <b>language</b> for your system.
</p>\n");
	}

    // Screen title for the first interactive dialog

    Wizard::SetContents( heading_text, contents, help_text, (boolean)WFM::Args(0), (boolean)WFM::Args(1));

    Wizard::SetDesktopIcon("yast-language");
    if ( Mode::initial )	// No .desktop files in inst-sys - use icon explicitly
	Wizard::SetTitleIcon( "babelfish" );

    
    // Get the user input.
    //
    any ret = nil;

    UI::SetFocus(`id(`language));

    repeat
	{
	ret = Wizard::UserInput();
	y2warning( "UserInput() returned %1", ret );

	if ( ret == `abort && Popup::ConfirmAbort(`painless) )
	    {
	    Wizard::RestoreNextButton();
	    return `abort;
	    }

	if( ret==`expert )
	    {
	    LanguageExpertDialog();
	    }

	if( ret == `help )
	    {
	    Wizard::ShowHelp( help_text );
	    }

	if( ret == `next || ret == `language )
	    {
	    // Get the selected language.
	    //
	    language = (string) UI::QueryWidget(`id(`language), `CurrentItem);

	    if( language != Language::language )
		{
		y2milestone( "Language changed from %1 to %2", Language::language, language );

		// popup text

		boolean kbd_adapt = false;

		if( Mode::initial && set_default )
		    {
		    kbd_adapt = true;
		    Timezone::ResetZonemap();
		    }
		else
		    {
		    Timezone::user_decision = true;
		    }

		// Set it in the Language module.
		//
		Language::Set( language );

		// Set Console font
		//
		Console::SelectFont( language );

		Installation::encoding = (use_utf8) ? "UTF-8" : Encoding::console;

		// Set it in YaST2
		Language::WfmSetLanguage();

		if( !Mode::normal && !set_default )
		    {
		    string msg = _("The language will be changed.

Current keyboard settings can be adapted according
to the new language or they can be kept as they are now.

Adapt keyboard settings?
");
		    kbd_adapt = Popup::YesNo( msg );
		    }

		if( kbd_adapt )
		    {
		    Keyboard::SetKeyboardForLang( language );
		    if( Mode::initial && set_default )
			{
			Keyboard::SetKeyboardDefault();
			}
		    }
		else
		    {
		    Keyboard::user_decision = true;
		    }

		if( ret != `next )
		    {
		    // Display newly translated dialog.
		    //
		    Wizard::SetFocusToNextButton();

		    return( `again );
		    }
		}

	    if( ret == `next )
		{
		// Language has been set already.
		// On first run store users decision as default.
		//
		if( set_default )
		    {
		    y2milestone("Resetting to default language");
		    Language::SetDefault();
		    }

		if( !Mode::initial )
		    {
		    // save language and console settings
		    Language::Save();
		    Console::Save();
		    }
		y2milestone( "Language: '%1', system encoding '%2'", language,
		             WFM::GetEncoding() );
		}
	    }
	}
    until ( ret == `next || ret == `back );

    // HEAVY UGLINESS  :-((((
    // Restoring in case of `back to be done outside the module because of
    // the retranslation loop in proposal_language.ycp.

    return (symbol) ret;
}
